---
  - name: Create cloudwatch directory
    local_action: 
      module: ansible.builtin.file
      path: "{{ cloudwatch_directory }}"
      state: directory

  - name: Get Cloudwatch metrics
    local_action:
      module: ansible.builtin.shell
      cmd: >-
        aws cloudwatch get-metric-statistics --namespace AWS/RDS
        --metric-name {{ item }}
        --start-time {{  start  }}
        --end-time {{ end }}
        --period 60
        --statistics Average
        --region {{ infra.servers.databases.postgres.region }}
        --dimensions Name=DBInstanceIdentifier,Value={{ infra.servers.databases.postgres.resource_id }}
        > {{ cloudwatch_directory }}/{{ item }}.json
    loop:
      "{{ metric_names }}"
    register: result

  - name: Convert JSON files to CSV
    local_action:
      module: ansible.builtin.shell
      cmd: >-
        jq -r '.Datapoints[] | [.Timestamp, .Average] | @csv' {{ cloudwatch_directory }}/{{ item }}.json > {{ cloudwatch_directory }}/{{ item }}.csv
    loop:
      "{{ metric_names }}"
    register: result

  - name: Sort CSV
    local_action:
      module: ansible.builtin.shell
      cmd: >-
        sort -o {{ cloudwatch_directory }}/{{ item }}.csv {{ cloudwatch_directory }}/{{ item }}.csv
    loop:
      "{{ metric_names }}"
    register: result

  - name: Format CSV for Gnuplot
    local_action:
      module: ansible.builtin.shell
      cmd: >-
        sed -i.bak -e 's/T/,/g' -e 's/:00+00:00//' -e 's/\"//g' -e 's/,/, /g' {{ cloudwatch_directory }}/{{ item }}.csv
    loop:
      "{{ metric_names }}"
    register: result

  - name: Open Gnuplot and create graphs
    local_action:
      module: ansible.builtin.shell
      cmd: >-
        gnuplot -e "set terminal png size 1000,800; set output '{{ cloudwatch_directory }}/{{ item }}.png'; set xlabel 'Time'; set ylabel 'Average'; set timefmt '%Y-%m-%d, %H:%M'; set xdata time; set bmargin 10; set rmargin 10; set format x \"%y/%m/%d\n%H:%M\"; plot '{{ cloudwatch_directory }}/{{ item }}.csv' using 1:3 title '{{ item }}' with linespoints"
    loop:
      "{{ metric_names }}"
    register: result
    # Ignore failures as some metrics won't be available depending on the test running
    failed_when: result.rc == 2
